#include <Adafruit_NeoPixel.h>
#include "IRremote.h"
#define NUM_PIXELS 48
Adafruit_NeoPixel strip = Adafruit_NeoPixel(48, 3, NEO_GRB +NEO_KHZ800);

int receiver = 11;
int relayPin = 4;
int speakerPin = 5;

IRrecv irrecv(receiver);
decode_results results;

void setup()
{
pinMode(speakerPin, OUTPUT);
pinMode(receiver, INPUT);
pinMode(relayPin, OUTPUT);
Serial.begin(9600);
Serial.println("IR Receiver Raw Data + Button Decode Test");
irrecv.enableIRIn();
for (int i = 1;i < 254;i++)
{
strip.begin();
strip.show();
}
}

void loop()
{
if (irrecv.decode(&results))
{
Serial.println(results.value, HEX);
translateIR();
irrecv.resume();
}
}

void translateIR()
{
switch(results.value)
{
case 0x295:
Serial.println(" Hit! ");
digitalWrite(relayPin, HIGH);
delay(8000);
digitalWrite(relayPin, LOW);
break;
}
delay(1);
}

void playtone(int atone, int duration)
{
for (long i = 0; i < duration * 1000L; i += atone * 2);
digitalWrite(speakerPin, HIGH);
delayMicroseconds(atone);
digitalWrite(speakerPin, LOW);
delayMicroseconds(atone);
}

void knightRider(uint16_t cycles, uint16_t speed, uint8_t width, uint32_t color)
{
uint32_t old_val[NUM_PIXELS];
for(int i = 0; i < cycles; i++)
{
for (int count = 0; count<NUM_PIXELS; count++)
{
strip.setPixelColor(count, color);
strip.show();
delay(speed);
old_val[count] = color;
for(int x = count; x>0; x--)
{
old_val[x-1] = dimColor(old_val[x-1], width);
strip.setPixelColor(x-1, old_val[x-1]);
strip.show();
}
}
}
}

void clearStrip()
{
for( int i = 0; i<NUM_PIXELS; i++)
{
strip.setPixelColor(i, 0x000000);
strip.show();
}
}
uint32_t dimColor(uint32_t color, uint8_t width)
{
return (((color&0xFF0000)/width)&0xFF0000) + (((color&0x00FF00)/width)&0x00FF00) + (((color&0x0000FF)/width)&0x0000FF);
}

uint32_t colorWheel(byte WheelPos)
{
byte state = WheelPos / 21;
switch(state)
{
case 0:
return strip.Color(255, 0, 255 - ((((WheelPos % 21) + 1) * 6) + 127));
break;
case 1:
return strip.Color(255, ((WheelPos % 21) + 1) * 6, 0);
break;
case 2:
return strip.Color(255, (((WheelPos % 21) + 1) * 6) + 127, 0);
break;
case 3:
return strip.Color(255 - (((WheelPos % 21) + 1) * 6), 255, 0);
break;
case 4:
return strip.Color(255 - (((WheelPos % 21) + 1) * 6) + 127, 255, 0);
break;
case 5:
return strip.Color(0, 255, ((WheelPos % 21) + 1) * 6);
break;
case 6:
return strip.Color(0, 255, (((WheelPos %21) + 1) * 6) + 127);
break;
case 7:
return strip.Color(0,255 - (((WheelPos % 21) + 1) * 6), 255);
break;
case 8:
return strip.Color(0, 255 - ((((WheelPos % 21) + 1) * 6) + 127), 255);
break;
case 9:
return strip.Color(((WheelPos % 21) + 1) * 6, 0, 255);
break;
case 10:
return strip.Color((((WheelPos % 21) + 1) * 6) + 127, 0, 255);
break;
case 11:
return strip.Color(255, 0, 255 - (((WheelPos % 21) + 1) * 6));
break;
default:
return strip.Color(0, 0, 0);
break;
}
}
